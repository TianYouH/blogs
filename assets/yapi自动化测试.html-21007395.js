import{_ as e,p as t,q as o,R as a,a1 as n,t as p}from"./framework-8fa3e4ce.js";const r={},c=n('<h1 id="yapi-自动化测试" tabindex="-1"><a class="header-anchor" href="#yapi-自动化测试" aria-hidden="true">#</a> Yapi 自动化测试</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>越来越多的应用基于前后端分离构建，后端提供数据接口，前端调用接口返回 json 数据渲染到 UI，这个时候保证后端接口数据正确性变的愈来愈重要，接口测试就是来解决这个问题。很多团队，接口测试就是手动运行接口，肉眼比对接口返回的数据，这样的操作流程效率低下，容易出错。接口管理平台 YApi 解决这一痛点，用户只需要在可视化 GUI 下，配置每个接口的入参和对 RESPONSE 断言，即可实现对接口的自动化测试，大大提升了接口测试的效率。</p><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h2><p>需要学习的基础概念主要包含测试集、Pre-Script 、Test-Script 三方面。</p><h3 id="测试集" tabindex="-1"><a class="header-anchor" href="#测试集" aria-hidden="true">#</a> 测试集</h3><p>在平时的开发过程中，经常遇到的一个问题是每次调试接口都需要重新填写参数，YApi测试集能够保存之前填写的参数，方便下次的调试。每个的请求参数还可以通过前面已请求的接口数据读取，或填写mock随机字符串，通过设置断言脚本验证返回数据的正确性。</p>',7),l=["src"],i=a("h3",{id:"pre-script",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#pre-script","aria-hidden":"true"},"#"),p(" Pre-Script")],-1),u=["src"],d=n(`<p>Pre-Script 包括请求参数处理脚本和响应数据处理脚本两部分。通过自定义 js 脚本方式改变请求的参数和返回的 response 数据。他的使用场景如下：</p><ul><li>接口请求参数需要加工 response code 数据</li><li>接口请求参数需要添加计算 token 字段</li></ul><h4 id="请求参数处理脚本示例" tabindex="-1"><a class="header-anchor" href="#请求参数处理脚本示例" aria-hidden="true">#</a> 请求参数处理脚本示例</h4><p>以 jquery ajax 为例，假设当前的请求参数是</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api/user?id=1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>那么公共变量 context 包含以下属性：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// pathname: &#39;/api/user&#39;,</span>
  <span class="token comment">// query: {</span>
  <span class="token comment">//   id: 1</span>
  <span class="token comment">// },</span>
  <span class="token literal-property property">requestHeader</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">requestBody</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>假设我们需要在 url 增加一个 token 参数，可以写如下自定义脚本：</p>`,8),k=["src"],h=n(`<h4 id="返回数据处理脚本示例" tabindex="-1"><a class="header-anchor" href="#返回数据处理脚本示例" aria-hidden="true">#</a> 返回数据处理脚本示例</h4><p>在上面的示例请求完成后，假设返回 responseBody={code:&quot;1&quot;},公共变量 context 包含以下属性：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// pathname: &#39;/api/user&#39;,</span>
  <span class="token comment">// query: {</span>
  <span class="token comment">//   id: 1</span>
  <span class="token comment">// },</span>
  <span class="token literal-property property">requestHeader</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">requestBody</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">responseData</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">responseHeader</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    content<span class="token operator">-</span>type<span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>假设我们需要修改响应数据 responseBody code 的值为 &quot;300&quot;，可以填写如下自定义脚本：</p>`,4),y=["src"],g=a("h3",{id:"test-script-测试脚本",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#test-script-测试脚本","aria-hidden":"true"},"#"),p(" Test-Script (测试脚本)")],-1),m=["src"],x=n(`<p>通过自定义脚本断言接口参数或返回 response 数据，在接口用例页面点击 Test 编辑。</p><h4 id="支持的公共变量" tabindex="-1"><a class="header-anchor" href="#支持的公共变量" aria-hidden="true">#</a> 支持的公共变量</h4><ol><li><p>assert</p><ul><li>assert(value) 判断 value 是否为 truth, 例如 assert(1) 通过， assert(0) 不通过，只要 value 不是 null, 0, false等值验证通过</li><li>assert.equal(actual, expected) 判断 actual 是否等于 expected，例如 assert(1, 1)通过</li><li>assert.notEqual(actual, expected) 判断 actual 是否不等于 expected</li><li>assert.deepEqual(actual, expected) 假设： actual = {a:1} 是一个对象，即便 expected = {a:1}，如果使用 assert.equal 可能也是不相等的，因为在 js 引用的只是对象的一个指针，需要使用 assert.deepEqual 比较两个对象是否相等</li><li>assert.notDeepEaual(actual, expected) 深度比较两个对象是否不相等</li></ul></li><li><p>status http 状态码</p></li><li><p>params http request params, 合并了 query 和 body</p></li><li><p>body 返回 response body</p></li><li><p>header 返回 response header</p></li><li><p>records 记录的 http 请求信息，假设需要获取 key 为 555 的接口参数或者响应数据，可通过 records[555].params 或 records[555].body 获取</p></li><li><p>log log（message） 函数,调试时使用，log 信息仅仅在断言失败后打印</p></li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>errcode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>data<span class="token punctuation">.</span>group_name<span class="token punctuation">,</span> <span class="token string">&#39;testGroup&#39;</span><span class="token punctuation">)</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="开始测试" tabindex="-1"><a class="header-anchor" href="#开始测试" aria-hidden="true">#</a> 开始测试</h2><h3 id="配置参数" tabindex="-1"><a class="header-anchor" href="#配置参数" aria-hidden="true">#</a> 配置参数</h3><p>YApi 除了支持常量字符串外，还支持 mock 随机字符串和变量字符串。</p><h3 id="mock参数" tabindex="-1"><a class="header-anchor" href="#mock参数" aria-hidden="true">#</a> Mock参数</h3><p>Mock 参数每次请求都会生成随机字符串,支持 mockjs 所有占位符</p>`,10),_=["src"],b=n(`<h4 id="变量参数" tabindex="-1"><a class="header-anchor" href="#变量参数" aria-hidden="true">#</a> 变量参数</h4><p>YApi 提供了强大的变量参数功能，你可以在测试的时候使用前面接口的 参数 或 返回值 作为 后面接口的参数，即使接口之间存在依赖，也可以轻松 一键测试~</p><p>格式：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>params<span class="token operator">|</span>body<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span>
</code></pre></div><p>例如：现有三个接口，分别是“创建数据集”和“模糊查询数据集”和“删除数据集”</p>`,5),v=["src"],q=n(`<p>模糊查询数据集接口需要传参数: 数据集名称(xxx)，而这个 （xxx） 需要通过 创建数据集 的创建名称获取，这时应在 数据集名称 的参数输入框中根据前者的 key 找到对应 xxx。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{ $.438.params.xxx }}&quot;</span>
<span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{ $.414.body.data[0].id }}&quot;</span>
</code></pre></div><p>其中 $. 是使用 动态变量 的标志，$.438.params 即表示 key 值为 438 用例的请求参数，$.414.body 即表示 key 值为 414 用例的返回值。</p><p>目前yapi中的query，body,header和pathParam的输入参数已经支持点击选择功能。无需自己填写表达式，只需在弹窗中选择需要展示的表达式即可。 输入选项包括常量，mock数据，在测试集合中也支持变量选择。</p><h3 id="开始测试-1" tabindex="-1"><a class="header-anchor" href="#开始测试-1" aria-hidden="true">#</a> 开始测试</h3>`,5),f=["src"],j=a("p",null,"在测试列表可以看到每个测试用例的 key,还有 开始测试、报告等功能 点击开始测试会按照 case 定义的参数从上往下一个一个进行测试，如果顺序有问题，可以拖动调整 测试完成之后，点击报告查看该次请求的结果",-1);function B(s,$){return t(),o("div",null,[c,a("img",{src:s.$withBase("/image/dev/debug/api/yapi1.png"),alt:"示例"},null,8,l),i,a("img",{src:s.$withBase("/image/dev/debug/api/yapi2.png"),alt:"示例"},null,8,u),d,a("img",{src:s.$withBase("/image/dev/debug/api/yapi3.png"),alt:"示例"},null,8,k),h,a("img",{src:s.$withBase("/image/dev/debug/api/yapi4.png"),alt:"示例"},null,8,y),g,a("img",{src:s.$withBase("/image/dev/debug/api/yapi5.png"),alt:"示例"},null,8,m),x,a("img",{src:s.$withBase("/image/dev/debug/api/yapi6.png"),alt:"示例"},null,8,_),b,a("img",{src:s.$withBase("/image/dev/debug/api/yapi7.png"),alt:"示例"},null,8,v),q,a("img",{src:s.$withBase("/image/dev/debug/api/yapi8.png"),alt:"示例"},null,8,f),j])}const w=e(r,[["render",B],["__file","yapi自动化测试.html.vue"]]);export{w as default};
