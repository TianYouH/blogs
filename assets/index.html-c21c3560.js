import{_ as t,M as o,p,q as l,R as n,t as s,N as e,a1 as c}from"./framework-8fa3e4ce.js";const i={},r=n("h1",{id:"webpack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack","aria-hidden":"true"},"#"),s(" Webpack")],-1),u=n("p",null,"webpack 不是解释器，而是一个模块打包工具（module bundler），只能认识 import 等简单的语法。 不仅有 es(import) 这样的模块规范，还有 commonJS(require())、CMD、AMD(define和require) 这样的规范，webpack 对这些模块规范一样可以识别。",-1),d=n("p",null,"webpack 是一个模块打包工具，可以使用它来管理项目中的模块依赖，并编译输出模块所需要的静态文件。它可以很好的管理、打包模块开发中所用到的 HTML、CSS、js 和静态文件（图片、文字）等，让开发更高效。对于不同类型的依赖，webpack 有对应的模块加载器，而且会分析模块间的依赖关系，最后合并生产优化的静态资源。",-1),k=n("p",null,"相关知识点",-1),h={href:"https://webpack.docschina.org/concepts/modules/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://webpack.docschina.org/api/module-methods/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://webpack.docschina.org/concepts/loaders/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"告诉 webpack 对于非 JS 文件如何打包",-1),g={href:"https://webpack.docschina.org/plugins/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"webpack 有一个丰富的插件接口。webpack 本身的大部分特性都使用这个插件接口。这使得 webpack 很灵活。",-1),f={href:"https://webpack.docschina.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"代码映射关系",-1),y={href:"https://webpack.docschina.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"webpack-dev-server 可用于快速开发应用程序。",-1),j={href:"https://webpack.docschina.org/guides/hot-module-replacement/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"模块热替换(hot module replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新所有类型的模块，而无需完全刷新。",-1),M={href:"https://webpack.docschina.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://webpack.docschina.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,'配置方式：mode 为 development 时是默认不带 tree shaking 的通过添加 optimization:{usedExports: true}的配置项来加上，同时需要在 package.json 里添加"sideEffects":false 的配置项，sideEffects 的值还可以为数组，表示不需要被 tree shaking 掉的内容，比如 css，并没有导出任何内容，可能就会被 tree shaking 掉出现问题，这时可以设置为["*.css"]',-1),E={href:"https://webpack.docschina.org/guides/code-splitting/#bundle-analysis",target:"_blank",rel:"noopener noreferrer"},P={href:"https://webpack.docschina.org/guides/code-splitting/#prefetchingpreloading-modules",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,[s("preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。"),n("br"),s(" preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。"),n("br"),s(" preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。"),n("br"),s(" 浏览器支持程度不同。")],-1),N=n("li",null,[n("p",null,"Caching 浏览器缓存")],-1),B=n("div",{class:"language-text","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`清除浏览器的缓存：在使用webpack的时候因为线上代码修改的时候因为代码的名字没有改变导致浏览器在加载网页的时候，取缓存中的代码，导致没有及时的获取最新的代码，这时候就要清除浏览器的缓存，
output: {
    filename: '[name].[contenthash].js',
    chunkFilename: '[name].[contenthash].js'
  }
4版本的webpack
contenthash的作用是：随意一个hash值这个值，根据打包的内容是否改变值，如果两次打包的内容都没有改变，contenthash是一样的。
对于老版本的webpack需要用
optimization： {
    runtimeChunk: {
      name: 'runtime'
    },
}，
这个会把逻辑代码和所用到的关系单独出来一个runtime的js文件
但是有时候这个文件会发生没有改变源代码但是，代码的文件名发生了改变，
这时候就需要做一个格外的配置，生成的runtime文件就是逻辑代码和包的关系，这个关系单独出来。
解决源代码的文件名改变
`)])],-1),V={href:"https://webpack.docschina.org/guides/shimming/",target:"_blank",rel:"noopener noreferrer"},A=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">_join</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;join&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>环境变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//package.json</span>
<span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack --env.production --config ./build/webpack.prod.js&quot;</span>

<span class="token comment">// webpack.common.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>env<span class="token operator">&amp;&amp;</span>env<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonconfig<span class="token punctuation">,</span>proConfig<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonconfig<span class="token punctuation">,</span>devConfig<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Babel</p></li><li><p>Library</p></li><li><p>Eslint</p></li><li><p>PWA</p></li><li><p>Mode</p></li><li><p>性能优化</p></li><li><p>多页应用</p></li><li><p>原理</p></li></ul>`,4);function D(H,I){const a=o("ExternalLinkIcon");return p(),l("div",null,[r,u,d,k,n("ul",null,[n("li",null,[n("p",null,[n("a",h,[s("Modules"),e(a)])]),n("p",null,[n("a",m,[s("API Modules"),e(a)])])]),n("li",null,[n("p",null,[n("a",b,[s("Loader"),e(a)])]),v]),n("li",null,[n("p",null,[n("a",g,[s("Plugin"),e(a)])]),_]),n("li",null,[n("p",null,[n("a",f,[s("SourceMap"),e(a)])]),w]),n("li",null,[n("p",null,[n("a",y,[s("WebpackDevServer"),e(a)])]),q]),n("li",null,[n("p",null,[n("a",j,[s("HMR"),e(a)])]),x]),n("li",null,[n("p",null,[n("a",M,[s("CodeSplitting"),e(a)]),s(" 代码分离")])]),n("li",null,[n("p",null,[n("a",S,[s("TreeShaking"),e(a)]),s(" 用来去掉没有引用的内容，只支持 EsModule 的引入方式")]),C]),n("li",null,[n("p",null,[n("a",E,[s("打包分析"),e(a)])])]),n("li",null,[n("p",null,[n("a",P,[s("PreLoading、PreFetching"),e(a)]),s(" 预获取/预加载模块")]),L]),N]),B,n("ul",null,[n("li",null,[n("a",V,[s("Shimming"),e(a)]),s(" 预置依赖 解决重复引入第三方库 垫片")])]),A])}const T=t(i,[["render",D],["__file","index.html.vue"]]);export{T as default};
