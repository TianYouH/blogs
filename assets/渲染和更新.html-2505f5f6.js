import{_ as t,p as i,q as r,R as e,t as d,a1 as l}from"./framework-8fa3e4ce.js";const n={},o=e("h1",{id:"渲染和更新",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#渲染和更新","aria-hidden":"true"},"#"),d(" 渲染和更新")],-1),h=["src"],s=l('<h2 id="初次渲染过程" tabindex="-1"><a class="header-anchor" href="#初次渲染过程" aria-hidden="true">#</a> 初次渲染过程</h2><ol><li>解析模板为 render 函数（一般在开发环境已完成，vue-loader）</li><li>触发响应式，监听 data 属性 getter setter</li><li>执行 render 函数，生成 vnode, patch(elem, vnode)</li></ol><h2 id="更新过程" tabindex="-1"><a class="header-anchor" href="#更新过程" aria-hidden="true">#</a> 更新过程</h2><ol><li>修改 data, 触发 setter（此前在 getter 中已被监听）</li><li>重新执行 render 函数，生成 newVnode</li><li>patch(vnode, newVNode)</li></ol><h2 id="异步渲染" tabindex="-1"><a class="header-anchor" href="#异步渲染" aria-hidden="true">#</a> 异步渲染</h2><ol><li>汇总 data 的修改，一次性更新视图</li><li>减少 DOM 操作次数，提高性能</li><li>使用 $nextTick 监听渲染回调</li></ol>',6);function c(a,_){return i(),r("div",null,[o,e("img",{src:a.$withBase("/image/web/vue/data.png"),alt:"图片"},null,8,h),s])}const f=t(n,[["render",c],["__file","渲染和更新.html.vue"]]);export{f as default};
