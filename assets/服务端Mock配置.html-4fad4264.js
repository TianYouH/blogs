import{_ as e,p as o,q as c,a1 as l}from"./framework-8fa3e4ce.js";const i={},r=l('<h1 id="服务端mock配置" tabindex="-1"><a class="header-anchor" href="#服务端mock配置" aria-hidden="true">#</a> 服务端Mock配置</h1><ul><li><p>下载<a href="/blogs/file/mock.zip">mock.zip</a>文件;</p><ul><li>解压后将mock文件夹放在项目的根目录下</li></ul></li><li><p>对于vue-cli2.x搭建的项目;</p><ul><li>找到项目根目录下的/build/webpack.dev.conf.js文件;</li><li>在文件顶部引入 const mockServer = require(&#39;../mock/mock-server.js&#39;);</li><li>在文件中搜索devServer对象,在对象中添加一个属性 after: mockServer</li></ul></li><li><p>对于vue-cli3.x以上版本构建的项目;</p><ul><li>找到项目根目录下的vue.config.js文件（如果不存在该文件,则手动创建一个即可）;</li><li>在文件中搜索devServer对象,在对象中添加一个属性after: require(&#39;./mock/mock-server.js&#39;)</li><li>至此服务端mock已经集成至项目中;</li></ul></li></ul><p>对于使用代理模式的项目,只需要关闭代理服务的配置即可直接使用mock服务; 对于没有使用代理模式的项目,只需要将env.js中的本地环境中的路径前缀设置为&#39;&#39;,即可直接使用mock服务。</p><blockquote><p>mock文件夹下的index.js文件为入口文件,如果在mock文件夹下添加了新的目录文件,需要手动在index.js文件中引入一下。</p></blockquote><blockquote><p>mock文件夹下的/demo/example/文件夹下包含了mock的常用示例,更多的使用方式自行参考Mock.js官网</p></blockquote><blockquote><p>mock文件夹下的所有代码均为node代码,不可直接使用esModule 的 import语法,需要使用commonjs的require 语法</p></blockquote>',6),k=[r];function t(m,s){return o(),c("div",null,k)}const a=e(i,[["render",t],["__file","服务端Mock配置.html.vue"]]);export{a as default};
