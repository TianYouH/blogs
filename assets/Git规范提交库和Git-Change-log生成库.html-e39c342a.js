import{_ as i,M as o,p as c,q as l,R as e,t as a,N as t,a1 as s}from"./framework-8fa3e4ce.js";const r={},m=s(`<h1 id="git规范提交库和git-change-log生成库" tabindex="-1"><a class="header-anchor" href="#git规范提交库和git-change-log生成库" aria-hidden="true">#</a> Git规范提交库和Git-Change-log生成库</h1><p>使用 commitizen 保证 提交格式正确，然后使用Husky配合commitlint验证提交说明的有效性，最后可以选择性使用 conventional-changelog 生成 Change log</p><h2 id="_1-commitizen-commit-message-格式工具" tabindex="-1"><a class="header-anchor" href="#_1-commitizen-commit-message-格式工具" aria-hidden="true">#</a> 1. <em>Commitizen</em> Commit message 格式工具</h2><p>用来生成符合格式的 Commit message。</p><p>首先，安装提交 cli 工具：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install commitizen -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，通过键入以下方式，初始化项目以使用 cz 常规更改日志适配器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>commitizen init cz-conventional-changelog --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，如果您使用的是yarn：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>commitizen init cz-conventional-changelog --yarn --dev --exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。这时，就会出现选项.</p><h2 id="_2-conventional-changelog-cli-根据-commit-生成日志" tabindex="-1"><a class="header-anchor" href="#_2-conventional-changelog-cli-根据-commit-生成日志" aria-hidden="true">#</a> 2. conventional-changelog-cli 根据 Commit 生成日志</h2><p>代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> conventional-changelog-cli
<span class="token builtin class-name">cd</span> my-project
conventional-changelog <span class="token parameter variable">-p</span> angular <span class="token parameter variable">-i</span> CHANGELOG.md <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),d=e("p",null,"参考资料：",-1),g={href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/typicode/husky/tree/master",target:"_blank",rel:"noopener noreferrer"},u={href:"https://commitlint.js.org",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",target:"_blank",rel:"noopener noreferrer"};function _(b,x){const n=o("ExternalLinkIcon");return c(),l("div",null,[m,e("blockquote",null,[d,e("p",null,[e("a",g,[a("阮一峰 Commit message 和 Change log 编写指南"),t(n)])]),e("p",null,[e("a",h,[a("commitizen"),t(n)])]),e("p",null,[e("a",p,[a("husky v4"),t(n)])]),e("p",null,[e("a",u,[a("commitlint"),t(n)])]),e("p",null,[e("a",v,[a("conventional-changelog-cli"),t(n)])])])])}const k=i(r,[["render",_],["__file","Git规范提交库和Git-Change-log生成库.html.vue"]]);export{k as default};
