import{_ as t,M as n,p as h,q as o,R as e,t as a,N as c,a1 as d}from"./framework-8fa3e4ce.js";const s={},i=d('<h1 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境" aria-hidden="true">#</a> 运行环境</h1><h2 id="从输入-url-到渲染出页面的整个过程" tabindex="-1"><a class="header-anchor" href="#从输入-url-到渲染出页面的整个过程" aria-hidden="true">#</a> 从输入 url 到渲染出页面的整个过程</h2><h3 id="网页请求过程" tabindex="-1"><a class="header-anchor" href="#网页请求过程" aria-hidden="true">#</a> 网页请求过程</h3><p>输入URL -&gt; DNS寻址 -&gt; 建立TCP连接 -&gt; 客户端发起请求 -&gt; 服务器响应请求 -&gt; 断开连接 -&gt; 渲染界面</p><h3 id="加载资源的形式" tabindex="-1"><a class="header-anchor" href="#加载资源的形式" aria-hidden="true">#</a> 加载资源的形式</h3><p>html代码<br> javascript css<br> 媒体文件，如图片、视频等......</p><h3 id="加载资源的过程" tabindex="-1"><a class="header-anchor" href="#加载资源的过程" aria-hidden="true">#</a> 加载资源的过程</h3><p>DNS解析：域名-&gt;IP地址<br> 浏览器根据IP地址向服务器发起http请求<br> 服务器处理http请求，并返回给浏览器</p><h3 id="渲染页面的过程" tabindex="-1"><a class="header-anchor" href="#渲染页面的过程" aria-hidden="true">#</a> 渲染页面的过程</h3><p>DomTree: 解析html构建DOM树。<br> CssomTree : 解析CSS生成CSSOM规则树。<br> RenderObjectTree: 将DOM树与CSSOM规则树合并在一起生成渲染对象树。<br> Layout: 遍历渲染树开始布局(layout)，计算每个节点的位置大小信息。<br> Painting: 将渲染树每个节点绘制到屏幕。</p><p>遇到<code>&lt;script&gt;</code>则暂停渲染，优先加载并执行JS代码，完成再继续</p>',11),l=e("br",null,null,-1),_={href:"https://segmentfault.com/a/1190000016458627",target:"_blank",rel:"noopener noreferrer"};function p(u,b){const r=n("ExternalLinkIcon");return h(),o("div",null,[i,e("blockquote",null,[e("p",null,[a("ref："),l,e("a",_,[a("前端阶段性总结（二）：页面渲染机制与性能优化"),c(r)])])])])}const m=t(s,[["render",p],["__file","运行环境.html.vue"]]);export{m as default};
