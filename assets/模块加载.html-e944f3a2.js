import{_ as n,p as s,q as a,a1 as e}from"./framework-8fa3e4ce.js";const t={},o=e(`<h1 id="模块加载" tabindex="-1"><a class="header-anchor" href="#模块加载" aria-hidden="true">#</a> 模块加载</h1><p>js的标准规范有以下几种 <code>CommandJS</code>，<code>ES Module</code>，<code>AMD</code>，<code>CMD</code>，<code>UMD</code>；</p><h2 id="commandjs" tabindex="-1"><a class="header-anchor" href="#commandjs" aria-hidden="true">#</a> CommandJS</h2><p><code>CommandJS</code>是服务端<code>JS</code>的标准规范，特点是只能用于服务端。</p><p>核心语法为<code>require</code>引入和<code>module.exports</code>输出。</p><p>每一个文件是一个模块，有自己的作用域。在文件内定义的变量、函数、类都是私有的，对其他文件不可见。</p><p>每个模块内部，<strong>module</strong>变量代表当前模块，该变量是一个对象。他有一个<strong>exports</strong>属性，这个属性是对外的接口。加载某一个模块，其实就是加载该模块的<code>module.exports</code>属性。</p><p>特点：</p><ul><li>所有代码运行在模块作用域内，不会污染全局变量</li><li>模块可以加载多次，但是只有第一次加载时运行一次。然后运行结果就被缓存下来，以后再加载，就是直接读取缓存的结果。</li></ul><h3 id="使用-node环境" tabindex="-1"><a class="header-anchor" href="#使用-node环境" aria-hidden="true">#</a> 使用（Node环境）</h3><p><code>nodejs</code>里的规范，环境变量：<strong>module</strong>、<strong>exports</strong>、<strong>require</strong>、<strong>global</strong></p><p>声明及引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 引用</span>
<span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math&#39;</span><span class="token punctuation">)</span>
math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 声明</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 引用</span>
<span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math&#39;</span><span class="token punctuation">)</span>
<span class="token function">math</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 声明</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">huang</span><span class="token operator">:</span> <span class="token string">&#39;huang&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">jin</span><span class="token operator">:</span> <span class="token string">&#39;jin&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 引用</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> huang<span class="token punctuation">,</span> jin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h4><p>node内部提供一个Module构建函数。每一个模块内部都有一个module对象，代表当前模块。它有以下属性</p><ul><li><p><code>id</code> 模块标识符，通常是带有绝对路径的模块文件名</p></li><li><p><code>path</code> 模块的文件名，绝对路径</p></li><li><p><code>exports</code> 模块对外输出的值，其他文件加载该模块其实就是读取<code>module.exports</code>变量</p></li><li><p><code>parent</code> 调用该模块的模块</p></li><li><p><code>children</code> 该模块用到的其他模块</p></li><li><p><code>loaded</code> 该模块是否已经加载完（在父模块中require一个子模块之后，子模块的loaded才变为true）</p></li></ul><h4 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖" aria-hidden="true">#</a> 循环依赖</h4><p>Node的循环依赖处理方式是：如果有循环，执行到哪就算哪。简单来说就是，当A模块开始加载时，缓存中会立刻出现A模块的<code>module.exports</code>，当<code>require(b)</code>，并且b中<code>require(a)</code>的时候，b只能获取到循环依赖之前的a。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//a.js</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">10</span>
<span class="token function">require</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">20</span>
<span class="token comment">//b.js</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加载模式" tabindex="-1"><a class="header-anchor" href="#加载模式" aria-hidden="true">#</a> 加载模式</h4><p>加载模块的方式是同步的。在输入时先加载整个模块，生成一个对象。再从这个对象上读取方法，这种加载被称为<strong>运行时加载</strong>。只有对应子模块加载完成，才能执行后面的操作。 为什么是同步的？因为<code>Nodejs</code>是用于服务端编程，模块文件存在于硬盘中，读取非常快。</p><h4 id="加载时机" tabindex="-1"><a class="header-anchor" href="#加载时机" aria-hidden="true">#</a> 加载时机</h4><p>输入的值是被输出的值的拷贝。 父模块引入了一个子模块，其实引入的是这个子模块输出的值的拷贝，一旦输出了这个值，模块内部的变化就影响不到这个值了。</p><h2 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module" aria-hidden="true">#</a> ES6 Module</h2><p>异步执行，模块几乎同时导入，后面模块不需要等待前面模块导入完成。<em>ES6 Module 输出的是值的动态引用</em>，不会缓存。</p><p>ES6 在语言标准层面上，实现了模块功能，而且实现的非常简单，宗旨是在浏览器和服务器通用的模块解决方案。</p><p>ES6 Module中使用<code>import</code>引入，<code>export</code>输出。</p><p>特点：</p><ul><li><code>import</code> 是只读属性，不能赋值。相当于<code>const</code></li><li><code>export/import</code> 提升，<code>import/export</code>必须位于模块的顶级，不可以位于作用域内，其次对于模块内的<code>import/export</code>都会提升到模块的顶部。</li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>声明及引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;box&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math&#39;</span>

<span class="token comment">// 引用math模块中所有方法并存放在module变量中。</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;box&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">&#39;./math&#39;</span>

<span class="token comment">// 为模块指定默认输出，一个文件中只能有一个export default，且后面不能跟变量声明的语句</span>
<span class="token comment">// 本质上，export default就是输出一个叫default的变量或者方法，然后系统允许你为它重命名。</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> 
<span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">&#39;./math&#39;</span> <span class="token comment">// export default 声明 引用</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>add <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 等同于export default add</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 等同于import foo from &#39;./module&#39;</span>

<span class="token comment">// export 与 import 的复合写法</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> &#39;module<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">}</span>
<span class="token comment">// 上面代码中，export和import语句可以结合为一行代码。但是，写成一行以后，foo和bar实际上没有被导入当前模块，只是相当于当前对外转发了这两个接口，导致当前模块不能直接使用foo，bar。</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="import-函数" tabindex="-1"><a class="header-anchor" href="#import-函数" aria-hidden="true">#</a> import()函数</h4><p>import的模块需要静态分析，所以不能用于动态加载。也就不能完成<em>required</em>同样的功能,因此，引入了import()函数，返回一个Promise对象。</p><p>这个函数的引入起到的很好的作用，比如我们在做多语言加载的时候，我们需要引入语言包，但是我们又不想一次性将所有语言包全部引入，我们只需要引入需要的语言包就可以了，那么就用到了import()函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="环境加载" tabindex="-1"><a class="header-anchor" href="#环境加载" aria-hidden="true">#</a> 环境加载</h4><p>传统方法</p><p><code>script</code>标签默认是同步加载的，加上<code>defer</code>和<code>async</code>就会开启异步加载。</p><p>区别：</p><p><code>defer</code>要等到整个页面在内存中正常渲染结束，才会执行；<code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。另外，如果有多个<code>defer</code>脚本，会按照他们在页面中出现的顺序加载，而多个<code>async</code>脚本，是不能保证按顺序加载</p><p><code>es6</code>模块加载</p><p>浏览器加载<code>es6</code>模块，也是用 <code>&lt;script&gt;</code>标签，不过要加入 <code>type=&quot;module&quot;</code> 属性。添加该属性后，默认开启 <code>defer</code> 属性。若想开启 <code>async</code> 属性，可以直接添加。作用同上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span>add<span class="token punctuation">,</span> redis<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>node.js</code>加载</p><p><code>node</code>中原本存在的<code>commonJS</code>与<code>es6</code>的模块加载并不兼容。因此node中做了限制</p><p><code>.mjs</code> 文件总是以<code>es6</code>模块加载； <code>.cjs</code> 文件总是以<code>commonJS</code>加载， <code>.js</code> 文件的加载取决于 <code>package.json</code> 中type字段，若 <code>type=&quot;module&quot;</code> 则以<code>es6</code>模块加载，默认<code>commonJS</code></p><h4 id="循环依赖-1" tabindex="-1"><a class="header-anchor" href="#循环依赖-1" aria-hidden="true">#</a> 循环依赖</h4><p><code>ES6 Module</code>其实并不关心有没有循环依赖，他并不需要产生结果，他只需要给你一个引用即可，至于是否能取到值，那么就需要开发者自己来保证了。</p><h4 id="加载时机-1" tabindex="-1"><a class="header-anchor" href="#加载时机-1" aria-hidden="true">#</a> 加载时机</h4><p><code>import</code> 是静态命令的方式，<code>js</code>引擎对脚本静态分析时，遇到模块加载命令<code>import</code>，会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被记载的那么模块中去取值。模块内部引用的变化会反应在外部。</p><p>在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为<strong>编译时加载</strong>。在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><h2 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h2><p><code>AMD</code>是<code>RequireJS</code>使用的规范，是为了浏览器中的模块加载而实现的。浏览器环境要加载资源，需要从服务器端加载模块，依靠网络下载，时间比较长。所以需要采用非同步的模块。<code>AMD</code>是异步加载。而<code>AMD</code>的设计思路，也是参考了一部分<code>CommandJS</code>的。</p><p><code>AMD</code>相关的<code>api</code> <code>define</code>，用于定义模块，如果我们定义的模块本身也依赖其他模块，那么就需要把它放在数组中，作为第一个参数</p><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1" aria-hidden="true">#</a> 使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;underscore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> _</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//    methods</span>
    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//    private because it&#39;s not returned (see below)</span>
    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//    public because it&#39;s returned</span>
    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//    public because it&#39;s returned</span>

    <span class="token comment">//    exposed public methods</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> b<span class="token punctuation">,</span>
        <span class="token literal-property property">c</span><span class="token operator">:</span> c
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// math.js 只有在有依赖的情况下，才需要进行定义依赖，否则可以直接传入内容，比如：</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;math&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">math</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环依赖-2" tabindex="-1"><a class="header-anchor" href="#循环依赖-2" aria-hidden="true">#</a> 循环依赖</h4><p>强制忽略，比如有两个模块A，B。当A依赖B，然后B依赖A的时候，B获取到的A是为未定义的状态。而且总是会把依赖的模块执行完成，也就是说B一定会被先执行完成。</p><h2 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h2><p><code>CMD</code> <code>sea.js</code>它的各个方面和<code>AMD</code>都非常像，只不过<code>CMD</code>推崇<strong>依赖就近</strong> <strong>延迟加载</strong>，<code>AMD</code>推崇的是<strong>前置依赖</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是也是延迟执行，还是要等加载完。判断方式就是正则啦。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i am Magic&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> UMD</h2><p><code>UMD</code>是一个为了解决跨平台MD导入问题（是一种思想），它的解决方法就是通过揉合<code>CommandJS</code>和<code>AMD</code> <code>CMD</code>来解决这个问题。</p><p>先判断是否支持<code>Nodejs</code>模块(<code>exports</code>是否存在)，如果存在就使用<code>Nodejs</code>模块。不支持的话，再判断是否支持<code>AMD</code>/<code>CMD</code>(判断<code>define</code>是否存在)。都不行就挂载在<code>window</code>全局对象上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// if the module has no dependencies, the above pattern can be simplified to</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// AMD. Register as an anonymous module.</span>
        <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Node. Does not work with strict CommonJS, but</span>
        <span class="token comment">// only CommonJS-like environments that support module.exports,</span>
        <span class="token comment">// like Node.</span>
        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Browser globals (root is window)</span>
        root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// Just return a value to define the module export.</span>
    <span class="token comment">// This example returns an object, but the module</span>
    <span class="token comment">// can return a function as the exported value.</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实它就是自定义了一种包装方式，并且对每种环境下进行不同处理。如果是有依赖的情况，一样会进行特殊情况处理。</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><table><thead><tr><th>*</th><th>AMD</th><th>CommandJS</th><th>UMD</th><th>CMD</th><th>ES Module</th></tr></thead><tbody><tr><td>使用在浏览器</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>使用在服务端</td><td>❌</td><td>✅</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>异步加载</td><td>✅</td><td>❌</td><td>✅</td><td>✅（允许）</td><td>✅（允许）</td></tr></tbody></table>`,72),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","模块加载.html.vue"]]);export{u as default};
