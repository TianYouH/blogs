import{_ as n,M as a,p as i,q as l,R as e,t as d,N as t,a1 as c}from"./framework-8fa3e4ce.js";const s={},r=e("h1",{id:"mongodb",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mongodb","aria-hidden":"true"},"#"),d(" Mongodb")],-1),p={href:"https://www.mongodb.com/zh-cn",target:"_blank",rel:"noopener noreferrer"},h=c(`<p>MongoDB是一个基于分布式文件存储的开源数据库，由C++语言编写，它提供了一个可扩展的高性能数据存储解决方案。</p><p>MongoDB是一个文档型数据库,它的数据是以文档的形式来存储的，文档在MongoDB中是一个非常重要的概念（类似于MySQL中的行），数据库是由一个个的集合组成的</p><p>特点<br> MongoDB并不需要事先创建好数据库和集合，也不需要预先定义好集合中字段的类型和长度，同一个集合中的数据也不需要有相同的结构等等</p><p>关系型数据库：MySQL<br> 非关系型数据库：Redis（键值型数据据库），MongoDB（文档型数据库）</p><p>对比</p><table><thead><tr><th>MongoDB</th><th>关系型数据库</th></tr></thead><tbody><tr><td>数据库(Database)</td><td>数据库(Database)</td></tr><tr><td>集合(Collection)</td><td>表(Table)</td></tr><tr><td>文档(Document)</td><td>行(Row)</td></tr><tr><td>字段（Field）</td><td>列(Column)</td></tr><tr><td>索引 (Index)</td><td>索引 (Index)</td></tr><tr><td>_id</td><td>主键(Primary Key)</td></tr><tr><td>$lookup</td><td>join</td></tr><tr><td>$group</td><td>aroup bv</td></tr></tbody></table><p>应用场景</p><table><thead><tr><th>MongoDB</th><th>关系型数据库</th></tr></thead><tbody><tr><td>实时分析</td><td>数据结构固定</td></tr><tr><td>内容管理</td><td>关系型数据库</td></tr><tr><td>非结构化数据</td><td>结构化数据</td></tr><tr><td>物联网</td><td>多表关联查询</td></tr><tr><td>移动Apps</td><td>传统应用</td></tr></tbody></table><p>数据库（Database）<br> 是集合的容器，相当于关系型DB （SQL）中的数据库。</p><p>集合（Collection）<br> 数据库中的一组文档，相当于SQL中的表。</p><p>文档（Document）<br> 集合中的一条记录,相当于SQL的表中的一行。不同的文档之间不必有相同的结构,这一点是和SQL不同的。</p><p>字段（Field）<br> 文档中的键值对，相当于SQL中的列。比较重要的区别是MongoDB中的一个field可以是一个JSON对象或者数组。</p><h2 id="安装配置" tabindex="-1"><a class="header-anchor" href="#安装配置" aria-hidden="true">#</a> 安装配置</h2><p>windows</p><p>前往官网下载（社区版下面的CommunityServer）.msi安装包，本地安装,安装中会带一个图形化的GUI工具Compass。</p><h3 id="包管理器安装" tabindex="-1"><a class="header-anchor" href="#包管理器安装" aria-hidden="true">#</a> 包管理器安装</h3><p>Windows</p><p><code>$ choco install mongodb -y</code></p><p>Linux</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Redhat</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> mongodb-org
<span class="token comment"># Ubuntu &amp; Debian &amp;SUSE</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> mongodb-org
<span class="token comment"># Fedora</span>
<span class="token function">sudo</span> dnf <span class="token function">install</span> mongodb-org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mас</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
brew tap mongodb/brew
brew <span class="token function">install</span> mongodb-community
<span class="token comment"># 启动</span>
brew services start mongodb-community
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h3><ul><li><code>mongosh</code>打开一个连接到本地实例的MongoShell。所有其他命令都需要再mongosh中执行。</li><li><code>show databases show dbs</code>显示当前 MongoDB实例中的所有数据库。</li><li><code>use</code> <code>&lt;dbname&gt;</code>切换到数据库<code>&lt;dbname&gt;</code>。</li><li><code>db</code>显示当前使用中的数据库名称。cls清屏。</li><li><code>show collections</code>显示当前数据库中的所有集合。</li><li><code>db.dropDatabase()</code>删除当前的数据库。</li><li><code>exit</code>退出mongosh会话。</li></ul><h3 id="创建-插入" tabindex="-1"><a class="header-anchor" href="#创建-插入" aria-hidden="true">#</a> 创建/插入</h3><ul><li><code>insertOne</code>在集合中插入一个新的文档。e.g.<code>db.users.insertOne({name: &quot;老杨&quot;})</code></li><li><code>insertManye</code>在集合中插入多个新的文档。e.g.<code>db.users.insertMany([{name: &quot;李四&quot;}, {name: &quot;王五&quot;}])</code></li></ul><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><ul><li><code>deleteOne</code> 删除满⾜条件的第⼀个⽂档。</li><li><code>deleteMany</code> 删除满⾜条件的所有⽂档。</li></ul><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h3><ul><li><code>updateOne</code>更新满足条件的第一个文档。</li><li><code>updateMany</code>更新满足条件的所有文档。</li><li><code>replaceOne</code>替换满足条件的第一个文档。</li><li><code>save</code>通过传入的文档替换已有文档或插入一个新的文档。</li><li><code>$set</code>只更新文档中$set 指定的字段，不会影响其他字段。</li><li><code>$inc</code>用于递增（或递减）文档中指定字段值的操作符。</li><li><code>$rename</code>更新某个字段的名称。</li><li><code>$unset</code>删除一个字段。</li><li><code>$push</code>将值加入一个数组中,不会判断是否有重复的值。</li><li><code>$pull</code>将值从一个数组中移除。</li><li><code>$addToSet</code>将值加入一个数组中,会判断是否有重复的值,若重复则不加入。</li></ul><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><ul><li><p><code>find</code>查询所有的文档。e.g.<code>db.users.find()</code></p></li><li><p><code>find(&lt;filterObject&gt;)</code>查询所有满足参数对象<code>&lt;filterObject&gt;</code>中指定过滤条件的数据。e.g.<code>db.users.find({name:&quot;老杨&quot;})</code></p></li><li><p><code>db.find(&lt;filterObject&gt;,&lt;selectObject&gt;)</code>查询所有满足参数对象<code>&lt;filterObiect&gt;</code>中指定过滤条件的数据,并且只返回<code>&lt;selectObject&gt;</code>中指定的字段。e.g.<code>db.users.find({name: &quot;老杨&quot;},{name: 1, email: 1})</code></p></li><li><p><code>findOne</code> 与find 用法相同，找到满足过滤条件的对象，但是只返回第findOne一条。e.g.<code>db.users.findOne({level: 1})</code></p></li><li><p><code>countDocuments</code>返回满足条件的记录的数量。</p></li><li><p><code>sort</code> 使⽤给定的字段按照升序或者降序来排序。</p></li><li><p><code>limit</code> 限定只返回给定数量的⽂档。</p></li><li><p><code>skip</code> 从头开始跳过给定数值的⽂档。</p></li></ul><h3 id="过滤条件" tabindex="-1"><a class="header-anchor" href="#过滤条件" aria-hidden="true">#</a> 过滤条件</h3><ul><li><code>$eq</code>等于(equal)。</li><li><code>$ne</code>不等于（not equal）。</li><li><code>$gt / $gte</code>大于（greater than) /大于等于 （greater than or equal to)</li><li><code>$it /$ite</code>小于（less than) /小于等于 （less than or equal to)</li><li><code>$in</code>值在指定值列表中，就返回该文档。</li><li><code>$nin</code>值不等于指定值列表中的任何一个,就返回该文档。</li><li><code>$and</code>检查复数条件是否均为真，可以简单理解为“并且”。</li><li><code>$or</code>检查复数条件中是否有一个为真，可以简单理解为“或者”。</li><li><code>$not</code>将$not里面的过滤条件取反。</li><li><code>$exists</code>检查一个字段是否存在。</li><li><code>$expr</code>在不同的字段之间做比较。</li></ul><h3 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h3><ul><li><code>$sum</code>计算总和。</li><li><code>$avg</code>计算平均值。</li><li><code>$min</code>获取最小值。</li><li><code>$max</code>获取最大值。</li><li><code>$push</code>将值加入一个数组中，不会判断是否有重复的值。</li><li><code>$first</code>获取第一个文档数据。</li><li><code>$last</code>获取最后一个文档数据。</li></ul><h2 id="gui工具" tabindex="-1"><a class="header-anchor" href="#gui工具" aria-hidden="true">#</a> GUI工具</h2>`,38),u=e("li",null,[e("p",null,"Compass")],-1),b=e("li",null,[e("p",null,"Navicat")],-1),m={href:"https://www.mongodb.com/try/download/shell",target:"_blank",rel:"noopener noreferrer"};function g(f,v){const o=a("ExternalLinkIcon");return i(),l("div",null,[r,e("p",null,[e("a",p,[d("官网"),t(o)])]),h,e("ul",null,[u,b,e("li",null,[e("p",null,[e("a",m,[d("MongodbShell"),t(o)])])])])])}const x=n(s,[["render",g],["__file","index.html.vue"]]);export{x as default};
