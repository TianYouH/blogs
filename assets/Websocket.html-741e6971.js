import{_ as l,M as o,p as r,q as s,R as e,t,N as i,a1 as n}from"./framework-8fa3e4ce.js";const c={},d=n('<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> Websocket</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Webscoket是Web浏览器和服务器之间的一种全双工通信协议，其中WebSocket协议由IETF定为标准，WebSocket API由W3C定为标准。一旦Web客户端与服务器建立起连接，之后的全部数据通信都通过这个连接进行。通信过程中，可互相发送JSON、XML、HTML或图片等任意格式的数据。</p><h2 id="ws与http对比" tabindex="-1"><a class="header-anchor" href="#ws与http对比" aria-hidden="true">#</a> WS与HTTP对比</h2><p>相同点主要有：</p><ul><li>都是基于TCP的应用层协议；</li><li>都使用Request/Response模型进行连接的建立；</li><li>在连接的建立过程中对错误的处理方式相同，在这个阶段WS可能返回和HTTP相同的返回码；</li><li>都可以在网络中传输数据。</li></ul><p>不同之处在于：</p><ul><li>WS使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用；</li><li>WS的连接不能通过中间人来转发，它必须是一个直接连接；</li><li>WS连接建立之后，通信双方都可以在任何时刻向另一方发送数据；</li><li>WS连接建立之后，数据的传输使用帧来传递，不再需要Request消息；</li><li>WS的数据帧有序。</li></ul>',8),h={href:"https://blog.csdn.net/LL845876425/article/details/106393358",target:"_blank",rel:"noopener noreferrer"};function p(_,b){const a=o("ExternalLinkIcon");return r(),s("div",null,[d,e("blockquote",null,[e("p",null,[t("ref： "),e("a",h,[t("websocket协议详解及报文分析"),i(a)])])])])}const W=l(c,[["render",p],["__file","Websocket.html.vue"]]);export{W as default};
