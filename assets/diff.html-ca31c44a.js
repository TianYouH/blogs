import{_ as i,p as d,q as r,R as e,a1 as t}from"./framework-8fa3e4ce.js";const f={},h=t('<h1 id="diff" tabindex="-1"><a class="header-anchor" href="#diff" aria-hidden="true">#</a> Diff</h1><p>diff 算法是 vdom 中最核心、最关键的部分;<br> diff 算法能在日常使用 vue react 中体现出来（如key）;</p><h2 id="树-diff" tabindex="-1"><a class="header-anchor" href="#树-diff" aria-hidden="true">#</a> 树 diff</h2><p>时间复杂度 O(n^3)</p><p>第一遍：遍历 tree1<br> 第二遍：遍历 tree2<br> 第三遍：排序</p><p>1000个节点，要计算1亿次，算法不可用</p><h2 id="vdom优化后" tabindex="-1"><a class="header-anchor" href="#vdom优化后" aria-hidden="true">#</a> vdom优化后</h2><h3 id="时间复杂度-o-n" tabindex="-1"><a class="header-anchor" href="#时间复杂度-o-n" aria-hidden="true">#</a> 时间复杂度 O(n)</h3><p>对比原则：</p><ol><li>只比较同一层级，不跨级比较。</li><li>tag 不相同，则直接删掉重建，不再深度比较。</li><li>tag 和 key，两者都相同，则认为是相同节点，不再深度比较。</li></ol>',10),n=["src"],o=["src"];function s(a,c){return d(),r("div",null,[h,e("img",{src:a.$withBase("/image/data/algorithm/diff1.png"),alt:"示例"},null,8,n),e("img",{src:a.$withBase("/image/data/algorithm/diff2.png"),alt:"示例"},null,8,o)])}const p=i(f,[["render",s],["__file","diff.html.vue"]]);export{p as default};
