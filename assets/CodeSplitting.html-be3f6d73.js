import{_ as e,M as p,p as t,q as o,R as n,t as s,N as l,a1 as i}from"./framework-8fa3e4ce.js";const r={},c=i(`<h1 id="code-splitting" tabindex="-1"><a class="header-anchor" href="#code-splitting" aria-hidden="true">#</a> Code Splitting</h1><p>代码分离</p><p>代码分离与 webpack 无关</p><h2 id="js代码分离" tabindex="-1"><a class="header-anchor" href="#js代码分离" aria-hidden="true">#</a> js代码分离</h2><ul><li>同步引入模块代码：webpack.common.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>异步引入模块代码(import(&#39;loadash&#39;).then）:无需配置 optimization 动态引入语法需安装 npm install babel-plugin-dynamic-import-webpack --save-dev .bebelrc 添加配置：&quot;plugins&quot;: [&quot;@babel/plugin-syntax-dynamic-import&quot;]</li></ul><p>懒加载，魔法命名 chunk 包名 import(/_ webpackChunkName:&quot;lodash&quot; _/&#39;lodash&#39;)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;async&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 这表明将选择哪些 chunk 进行优化。当提供一个字符串，有效值为 all，async 和 initial。设置为 all 可能特别强大，因为这意味着 chunk 可以在异步和非异步 chunk 之间共享。</span>
      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token comment">// 生成 chunk 的最小体积（以 bytes 为单位）。</span>
      <span class="token literal-property property">minRemainingSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 当一个模块被引用至少1次才进行代码分割</span>
      <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment">//  同时加载的模块数最多 30</span>
      <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment">// 3 入口文件引入的库最多分割出3个</span>
      <span class="token literal-property property">enforceSizeThreshold</span><span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 打包同步代码时有效，根据cachegroups决定分割出的代码放到哪个文件中去</span>
        <span class="token literal-property property">defaultVendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果是node_modules 中引入的模块就打包到vendors.js中</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 优先级，优先打包到满足条件的优先级高的组里面</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 如果一个模块已经被打包过了，再打包就会忽略这个模块</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),u={href:"https://webpack.docschina.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"css-代码分离",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css-代码分离","aria-hidden":"true"},"#"),s(" CSS 代码分离")],-1),k=n("p",null,"css代码分割插件：mini-css-extranct-plugin",-1),m=n("p",null,"默认会将css打包到js中 缺点：暂时不支持hrm，因此适合在线上打包 安装 -> 使用： 1、在webpack.prod.js中配置plugin 2、更改loader，开发环境和线上环境分开配置loader，在webpack.prod.js中，配置loader为MiniCssExtratPlugin.loader 如果不起作用，考虑以下几点： 1.是否配置了treeShaking: optimization里的usedExports， sideEffects需要配置为['*.css']",-1),v=n("p",null,"css压缩：optimize-css-webpack-plugin",-1),b=n("p",null,"filename:入口打包出的文件名 chunkFileName:打包出的chunk名字 miniCssExtractPlugin： 默认css在JS里面 如果配置不生效：",-1);function h(y,g){const a=p("ExternalLinkIcon");return t(),o("div",null,[c,n("p",null,[n("a",u,[s("官方命名"),l(a)])]),d,k,m,v,b])}const x=e(r,[["render",h],["__file","CodeSplitting.html.vue"]]);export{x as default};
