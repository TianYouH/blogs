import{_ as s,p as a,q as n,a1 as e}from"./framework-8fa3e4ce.js";const l={},t=e(`<h1 id="shell-基础总结" tabindex="-1"><a class="header-anchor" href="#shell-基础总结" aria-hidden="true">#</a> Shell 基础总结</h1><p>Shell是所有解释器的总称<br> Shell是用户与Linux内核之间的解释器<br> 解释器负责将用户的指令翻译为内核可以识别的指令</p><ul><li>常见的Shell解释器</li></ul><p>/bin/bash 默认<br> /bin/sh<br> /bin/csh<br> /bin/tcsh</p><details class="custom-container details"><summary>bash基本特性</summary><p>快捷键、Tab键补齐（Ctrl+A：光标移至当前行最前面、Ctrl+E：光标移至当前行最前面、Ctrl+C：撤销准备执行命令、<strong>Ctrl+L：清屏</strong>）</p><p>history：命令历史</p><p>aliase：命令别名</p><p>标准输入与输出的重定向（&gt;、&gt;&gt;、2&gt;、3&gt;&gt;、&amp;&gt;）<br><code>&gt;</code>重定向输出<code>ls &gt; a.text</code>（每次执行，会覆盖上次输出同名文件）<br><code>&gt;&gt;</code>重定向追加输出<code>ls &gt; a.text</code>（每次执行，会基于上次输出同名文件内容追加输出内容） <code>2&gt;</code>重定向输出报错信息<code>ls 不存在文件.text 2&gt; a.text</code><br><code>&amp;&gt;</code>重定向输出正确及报错信息<code>ls 不存在文件.text b.text &amp;&gt; a.text</code></p><p>管道（|）：将多条命令组合，满足复杂功能<br> 将前一个命令的输出结果 通过管道 传递第二条命令作为它的输入信息<br><code>ls | grep -</code>根据列表数据过滤出包含 - 的文件名</p></details><blockquote><p>可以通过usermod、chsh修改所使用的解释器</p></blockquote><p>Shell执行命令的方式</p><ul><li>交互式（命令行） <ul><li>人工干预</li><li>逐条解释执行、效率低</li></ul></li><li>非交互式（脚本） <ul><li>需要提前设计</li><li>批量执行、效率高</li></ul></li></ul><h2 id="脚本设计与运行" tabindex="-1"><a class="header-anchor" href="#脚本设计与运行" aria-hidden="true">#</a> 脚本设计与运行</h2><p>脚本：提前将可执行的命令语句写入一个文件（顺序执行、解释器逐行解释代码）</p><p>常见的脚本语言（Shell脚本、Python/Perl/Ruby脚本、JSP/PHP脚本...）</p><ul><li>一个合格规范脚本应该包含以下这些内容 <ul><li>#!脚本声明（使用哪种解释器解释代码）</li><li>注释信息（步骤、思路、用途等），以#开头的为注释信息</li><li>可执行语句</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#一个bash测试脚本</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;你好世界&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行脚本的多种方式 <ul><li>方法一，需要为文件赋予可执行权限（通过chmod分配权限） <ul><li>绝对路径执行</li><li>相对路径执行</li></ul></li><li>方法二，不需要文件有可执行的权限 <ul><li>sh [脚本文件名]</li><li>source [脚本文件名] #不会启动子进程（通过pstree查看进程树）</li></ul></li></ul></li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h3 id="自定义变量" tabindex="-1"><a class="header-anchor" href="#自定义变量" aria-hidden="true">#</a> 自定义变量</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span>       <span class="token comment">#3</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${a}</span>     <span class="token comment">#3</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${a}</span><span class="token number">456</span>  <span class="token comment">#3456</span>
<span class="token builtin class-name">unset</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量" aria-hidden="true">#</a> 定义变量</h4><p>以固定的名称，存放可以能有变化的值</p><ul><li>定义变量的格式 <ul><li>变量名=变量值</li></ul></li><li>取消变量的格式 <ul><li>unset 变量名</li></ul></li></ul><blockquote><p>=两边不能有空格，不要使用关键字做变量名，如ls、cd等<br> 如果变量名已经存在则覆盖之前的变量值<br> 变量名称由 字母/数字/下划线组成，不能以数字开始</p></blockquote><h4 id="查看变量" tabindex="-1"><a class="header-anchor" href="#查看变量" aria-hidden="true">#</a> 查看变量</h4><ul><li>查看变量的语法格式 <ul><li>$变量名</li><li>\${变量名}</li></ul></li></ul><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><ul><li>存储多个数据的集合就是数组</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">test</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 定义数组</span>
<span class="token comment"># 调用数组的值</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${test<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span> <span class="token comment"># 1</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${test<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span> <span class="token comment"># 2</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${test<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span> <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p>变量名通常大写，由操作系统维护</p><ul><li>存储在/etc/profile或~/.bash_profile（linux）</li><li>命令env可以列出所有环境变量</li><li>常见环境变量 <ul><li>PATH：命令搜索路径（查询命令所在路径）</li><li>PWD：工作目录路径</li><li>USER: 当前用户名</li><li>UID：当前用户ID号</li><li>HOME：当前用户的家目录</li><li>SHELL：当前shell解释器</li></ul></li></ul><h3 id="位置变量" tabindex="-1"><a class="header-anchor" href="#位置变量" aria-hidden="true">#</a> 位置变量</h3><p>bash（解释器）内置变量，存储脚本执行时的参数</p><ul><li>存储脚本执行时的参数</li><li>使用$n表示，n为数字序列号</li><li>$1、$2、...、\${10}、\${11}、... （10之后需要用花括号包裹）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#定义vars.sh文件</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$1</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$2</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$3</span>

<span class="token comment">#执行vars.sh</span>
<span class="token function">sh</span> vars.sh aa <span class="token number">99</span> cc
<span class="token comment">#打印 aa 99 cc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预定义变量" tabindex="-1"><a class="header-anchor" href="#预定义变量" aria-hidden="true">#</a> 预定义变量</h3><p>bash（解释器）内置变量，可以调用但是不能赋值或修改</p><ul><li>用来保存脚本程序的执行信息 <ul><li>直接使用这些变量</li><li>不能直接为这些变量赋值</li></ul></li></ul><table><thead><tr><th style="text-align:center;">变量名</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">$?</td><td style="text-align:center;"><em>上一条</em>命令执行后的返回状态，0：正常，[不等于0]：表示异常</td></tr><tr><td style="text-align:center;">$0</td><td style="text-align:center;">当前所在的进程或脚本名</td></tr><tr><td style="text-align:center;">$$</td><td style="text-align:center;">当前运行进程的PID号</td></tr><tr><td style="text-align:center;">$#</td><td style="text-align:center;">已加载的位置变量的个数</td></tr><tr><td style="text-align:center;">$*</td><td style="text-align:center;">所有位置变量的值</td></tr></tbody></table><h3 id="变量的扩展应用" tabindex="-1"><a class="header-anchor" href="#变量的扩展应用" aria-hidden="true">#</a> 变量的扩展应用</h3><h4 id="多种引号的区别" tabindex="-1"><a class="header-anchor" href="#多种引号的区别" aria-hidden="true">#</a> 多种引号的区别</h4><ul><li>区分三种定界符 <ul><li>双引号&quot;&quot;：允许扩展，以$引用其它变量</li><li>单引号&#39;&#39;：禁用扩展，即便$也视为普通字符</li><li>反引号\`\`：将命令的执行输出作为变量值，$()与反引号等效</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token environment constant">$USER</span> id is <span class="token environment constant">$UID</span>&quot;</span>
<span class="token comment">#root id is 0</span>

<span class="token builtin class-name">echo</span> <span class="token string">&#39;$USER id is $UID&#39;</span>
<span class="token comment">#$USER id is $UID</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ls</span><span class="token variable">\`</span></span> <span class="token comment">#a=$(ls)</span>
<span class="token builtin class-name">echo</span> a
<span class="token comment">#CNAME data.json deploy.sh docs logo.png node_modules package.json package-lock.json test 我的博客.xmind</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read标准输入取值" tabindex="-1"><a class="header-anchor" href="#read标准输入取值" aria-hidden="true">#</a> read标准输入取值</h4><ul><li>read从键盘读入变量值完成赋值 <ul><li>格式：<code>read -p &quot;提示信息&quot; 变量名</code></li><li>-p 可选（提示文字），-t 指定超时秒数，-s 设置是否在终端显示输入内容</li></ul></li></ul><p>下方有示例</p><h3 id="局部与全局" tabindex="-1"><a class="header-anchor" href="#局部与全局" aria-hidden="true">#</a> 局部与全局</h3><p>变量的作用范围</p><ul><li>局部变量 <ul><li>新定义的变量默认只在当前Shell环境中有效，无法在子Shell环境中使用</li></ul></li><li>全局变量 <ul><li>全局变量在当前Shell及子Shell环境中均有效</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">123</span> <span class="token comment">#定义局部变量</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">456</span> <span class="token comment">#定义全局变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算" tabindex="-1"><a class="header-anchor" href="#运算" aria-hidden="true">#</a> 运算</h2><h3 id="基本运算法则-整数" tabindex="-1"><a class="header-anchor" href="#基本运算法则-整数" aria-hidden="true">#</a> 基本运算法则（整数）</h3><ul><li><p>使用$[]或$(())表达式进行运算</p><ul><li>格式：$[数字2 + 数字2 ...]</li></ul></li><li><p>四则运算</p><ul><li>加法：num1 + num2</li><li>减法：num1 - num2</li><li>乘法：num1 * num2</li><li>除法：num1 / num2</li></ul></li><li><p>取余：num1 % num2</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> $<span class="token punctuation">[</span><span class="token number">1</span>+2<span class="token punctuation">]</span> <span class="token comment">#3</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token variable">))</span></span> <span class="token comment">#3</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token builtin class-name">echo</span> $<span class="token punctuation">[</span>a*b<span class="token punctuation">]</span> <span class="token comment">#6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量的自增-减等操作" tabindex="-1"><a class="header-anchor" href="#变量的自增-减等操作" aria-hidden="true">#</a> 变量的自增/减等操作</h3><table><thead><tr><th style="text-align:center;">简写表达式</th><th style="text-align:center;">完整表达式</th></tr></thead><tbody><tr><td style="text-align:center;">i++</td><td style="text-align:center;">i=i+1</td></tr><tr><td style="text-align:center;">i+=2</td><td style="text-align:center;">i=i+2</td></tr><tr><td style="text-align:center;">i-=2</td><td style="text-align:center;">i=i-2</td></tr><tr><td style="text-align:center;">i*=2</td><td style="text-align:center;">i=i*2</td></tr><tr><td style="text-align:center;">i/=2</td><td style="text-align:center;">i=i/2</td></tr><tr><td style="text-align:center;">i%=2</td><td style="text-align:center;">i=i%2</td></tr></tbody></table><h3 id="命令-let" tabindex="-1"><a class="header-anchor" href="#命令-let" aria-hidden="true">#</a> 命令：let</h3><p>let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5</span>+4
<span class="token builtin class-name">let</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">9</span>-3 
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token variable">$b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bc计算器-扩展-小数" tabindex="-1"><a class="header-anchor" href="#bc计算器-扩展-小数" aria-hidden="true">#</a> bc计算器（扩展：小数）</h3><p>Bash内建机制仅支持整数运算，不支持小数运算</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> $<span class="token punctuation">[</span><span class="token number">1.1</span>+1.5<span class="token punctuation">]</span>
<span class="token comment">#bash: 1.1+1.5: syntax error: invalid arithmetic operator (error token is &quot;.1+1.5&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要通过计算器软件bc实现小数运算</p><ul><li>如果没有该软件需要使用yum安装</li><li>bc支持交互式和非交互式两种方式计算，scale=n可以约束小数位</li><li>bc支持的比较符：&gt;、&gt;=、&lt;、&lt;=、==、!=，表达式成立返回1，否则返回0</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;1.3*2.4&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span> <span class="token comment">#3.12</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;1&gt;2&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span> <span class="token comment">#0</span>
<span class="token function">bc</span>
<span class="token number">1.5</span>+2.4 <span class="token comment">#3.9</span>
quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="第一个shell脚本" tabindex="-1"><a class="header-anchor" href="#第一个shell脚本" aria-hidden="true">#</a> 第一个Shell脚本</h3><ol><li>新建文件</li><li>添加可执行语句（命令）</li><li>给文件添加x（可执行权限）执行权限</li></ol><p>first.sh</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;你好世界&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="位置变量示例" tabindex="-1"><a class="header-anchor" href="#位置变量示例" aria-hidden="true">#</a> 位置变量示例</h3><p>user.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 新增用户并修改密码 sh user.sh huang 123456</span>

<span class="token function">useradd</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token operator">|</span> <span class="token function">passwd</span> <span class="token parameter variable">--stdin</span> <span class="token variable">$1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read标准输入取值-1" tabindex="-1"><a class="header-anchor" href="#read标准输入取值-1" aria-hidden="true">#</a> read标准输入取值</h3><p>read.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 新增用户并修改密码</span>

<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入用户名：&quot;</span> name
<span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">6</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入密码：&quot;</span> pass

<span class="token function">useradd</span> <span class="token string">&quot;<span class="token variable">$name</span>&quot;</span> <span class="token comment">#加引号防止用户输入空格，如 &quot;huang jin&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$pass</span>&quot;</span> <span class="token operator">|</span> <span class="token function">passwd</span> <span class="token parameter variable">--stdin</span> <span class="token variable">$name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监控脚本之显示硬件信息" tabindex="-1"><a class="header-anchor" href="#监控脚本之显示硬件信息" aria-hidden="true">#</a> 监控脚本之显示硬件信息</h3><p>check.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 查询硬件信息</span>

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[34m----服务器硬件信息----<span class="token entity" title="\\033">\\033</span>[0m&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[34m----网卡信息----<span class="token entity" title="\\033">\\033</span>[0m&quot;</span>
<span class="token function">ifconfig</span> ens33 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;inet &quot;</span>

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[34m----内存的剩余容量信息：----<span class="token entity" title="\\033">\\033</span>[0m&quot;</span>
<span class="token function">grep</span> MemAvailable /proc/meminfo

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[34m----磁盘根分区的使用情况：----<span class="token entity" title="\\033">\\033</span>[0m&quot;</span>
<span class="token function">df</span> <span class="token parameter variable">-h</span> /

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[34m----本机CPU型号信息如下：----<span class="token entity" title="\\033">\\033</span>[0m&quot;</span>
<span class="token function">grep</span> <span class="token string">&quot;model name&quot;</span> /proc/cpuinfo

<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据计算" tabindex="-1"><a class="header-anchor" href="#数据计算" aria-hidden="true">#</a> 数据计算</h3><p>calc.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 计算脚本</span>

<span class="token comment"># 计算1+2+3，...，+n的和，可以使用n*(n+1)/2公式快速计算结果</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入一个正整数：&quot;</span> num
<span class="token assign-left variable">sum</span><span class="token operator">=</span>$<span class="token punctuation">[</span>num*<span class="token punctuation">(</span>num+1<span class="token punctuation">)</span>/2<span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[32m<span class="token variable">$num</span>以内的整数和是：<span class="token variable">$sum</span><span class="token entity" title="\\033">\\033</span>[0m&quot;</span>

<span class="token comment"># 使用三角形的底边和高计算面积：A=1/2bh</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入三角形底边长度：&quot;</span> bottom
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入三角形高度：&quot;</span> hight
<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=1;1/2*<span class="token variable">$bottom</span>*<span class="token variable">$hight</span>&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[32m三角形的面积是：<span class="token variable">$A</span><span class="token entity" title="\\033">\\033</span>[0m&quot;</span>

<span class="token comment"># 梯形面积：(上底边长度+下底边长度)*高/2</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入梯形上底边长度：&quot;</span> a
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入梯形下底边长度：&quot;</span> b
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入梯形高度：&quot;</span> h
<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=2;(<span class="token variable">$a</span>+<span class="token variable">$b</span>)*<span class="token variable">$h</span>/2&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[32m梯形的面积是：<span class="token variable">$A</span><span class="token entity" title="\\033">\\033</span>[0m&quot;</span>

<span class="token comment"># 使用A=πr2公式计算圆的面积，取2位小数点精度，π=3.14</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入圆的半径：&quot;</span> r
<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=2;3.14*<span class="token variable">$r</span>^2&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>[32m圆的面积是：<span class="token variable">$A</span><span class="token entity" title="\\033">\\033</span>[0m&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置yum源脚本" tabindex="-1"><a class="header-anchor" href="#配置yum源脚本" aria-hidden="true">#</a> 配置YUM源脚本</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 配置YUM文件脚本</span>

<span class="token comment"># 定义YUM源路径</span>
<span class="token assign-left variable">URL</span><span class="token operator">=</span>ftp://192.168.0.1/centos <span class="token comment"># 路径是瞎写的</span>

<span class="token comment"># 创建YUM源配置文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;[CentOS]
name=centos
baseurl=<span class="token variable">$URL</span>
gpgcheck=0&quot;</span> <span class="token operator">&gt;</span> /ect/yum.repos.d/iyum.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,82),i=[t];function c(p,r){return a(),n("div",null,i)}const d=s(l,[["render",c],["__file","index.html.vue"]]);export{d as default};
