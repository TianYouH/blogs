import{_ as t,M as i,p as l,q as o,R as n,t as a,N as e,a1 as c}from"./framework-8fa3e4ce.js";const p={},r=c(`<h1 id="git-钩子拦截配置" tabindex="-1"><a class="header-anchor" href="#git-钩子拦截配置" aria-hidden="true">#</a> Git-钩子拦截配置</h1><h2 id="测试环境" tabindex="-1"><a class="header-anchor" href="#测试环境" aria-hidden="true">#</a> 测试环境</h2><pre><code>windows7&gt;vscode&gt;webpack@4.x
</code></pre><h2 id="相关依赖" tabindex="-1"><a class="header-anchor" href="#相关依赖" aria-hidden="true">#</a> 相关依赖</h2><pre><code>&quot;husky&quot;: &quot;^7.0.4&quot;
    husky可以让我们向项目中方便添加git hooks
&quot;lint-staged&quot;: &quot;^12.1.2&quot;
    在代码提交之前，进行代码规则检查能够确保进入git库的代码都是符合代码规则的。
    但是整个项目上运行lint速度会很慢，lint-staged能够让lint只检测暂存区的文件，所以速度很快。
&quot;@commitlint/cli&quot;: &quot;^15.0.0&quot;
&quot;@commitlint/config-conventional&quot;: &quot;^15.0.0&quot;
    用于检查项目的 Commit message 是否符合格式（采用默认）。
</code></pre><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><pre><code>\`npm i husky lint-staged @commitlint/cli @commitlint/config-conventional -D\`
</code></pre><h2 id="相关配置说明" tabindex="-1"><a class="header-anchor" href="#相关配置说明" aria-hidden="true">#</a> 相关配置说明</h2><h3 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a> lint-staged</h3><p>配置文件 添加到项目根目录下 根据实际验证情况调整配置</p><p>lint-staged.config.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;*.(js|vue)&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eslint --fix --cache&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prettier  --write&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;*.(vue|htm|html|css|less|sass|scss|styl|stylus|md|js)&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// &#39;stylelint --fix --cache&#39;,</span>
    <span class="token string">&#39;prettier  --write&#39;</span>
  <span class="token punctuation">]</span>
  <span class="token comment">// &#39;*.(htm|html)&#39;: [&#39;htmlhint&#39;, &#39;prettier  --write&#39;]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commitlint" tabindex="-1"><a class="header-anchor" href="#commitlint" aria-hidden="true">#</a> commitlint</h3><p>配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span> <span class="token operator">&gt;</span> commitlint.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;foo: bar&#39;</span> <span class="token operator">|</span> commitlint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果遇见<code>command not found: commitlint</code>错误，可以尝试改为<code>npx commitlint</code></p></blockquote><h3 id="husky" tabindex="-1"><a class="header-anchor" href="#husky" aria-hidden="true">#</a> husky</h3><ol><li>在packgae.json中添加prepare脚本</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// prepare脚本会在npm install（不带参数）之后自动执行。</span>
<span class="token comment">// 也就是说当我们执行npm install安装完项目依赖后会执行 husky install命令，该命令会创建.husky/目录并指定该目录为git hooks所在的目录。</span>
<span class="token comment">// 如果 无需执行npm install，请手动执行npm run prepare命令，完成钩子配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加git hooks，运行一下命令创建git hooks</li></ol><p><code>npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</code></p><p>运行完该命令后我们会看到.husky/目录下新增了一个名为pre-commit的shell脚本。 也就是说在在执行git commit命令时会先执行pre-commit这个脚本。pre-commit脚本内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

npx lint-staged
<span class="token comment"># 依赖 lint-staged 库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到该脚本的功能就是执行npx lint-staged这个命令</p><ol start="3"><li>添加 commit-msg 验证钩子</li></ol><p><code>npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</code></p><p>运行完该命令后我们会看到.husky/目录下新增了一个名为commit-msg的shell脚本（如果没有自动生成，请手动添加）。 也就是说在在执行git commit命令时会先执行pre-commit这个脚本。pre-commit脚本内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

npx --no-install commitlint <span class="token parameter variable">--edit</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>
<span class="token comment"># 依赖 commitlint 相关库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交的时候会依据配置钩子，验证代码规范及提交格式；</p><ol start="4"><li>生成目录格式参考</li></ol><ul><li>.husky 📁 <ul><li>_ 📁 <ul><li>.gitignore 📄</li><li>husky.sh 📄</li></ul></li><li>commit-msg 📄</li><li>pre-commit 📄</li></ul></li></ul>`,33),d=n("p",null,"参考资料：",-1),u={href:"https://typicode.github.io/husky/#/?id=features",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/366786798",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"};function v(k,b){const s=i("ExternalLinkIcon");return l(),o("div",null,[r,n("blockquote",null,[d,n("p",null,[n("a",u,[a("husky"),e(s)])]),n("p",null,[n("a",m,[a("husky使用总结"),e(s)])]),n("p",null,[n("a",h,[a("lint-staged"),e(s)])])])])}const q=t(p,[["render",v],["__file","Git-钩子拦截配置.html.vue"]]);export{q as default};
