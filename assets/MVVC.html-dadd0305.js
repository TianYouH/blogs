import{_ as r,M as o,p as n,q as l,R as e,t as a,N as t,a1 as V}from"./framework-8fa3e4ce.js";const M={},s=e("h1",{id:"mvvc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvvc","aria-hidden":"true"},"#"),a(" MVVC")],-1),h=e("h2",{id:"什么是mvvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是mvvm","aria-hidden":"true"},"#"),a(" 什么是MVVM？")],-1),c=["src"],m=V('<p><code>MVVM（Model–View–Viewmodel）</code></p><ul><li>M(odel)层：模型，定义数据结构。</li><li>C(ontroller)层：实现业务逻辑，数据的增删改查。在MVVM模式中一般把C层算在M层中，（只有在理想的双向绑定模式下，Controller 才会完全的消失。这种理想状态一般不存在）</li><li>ViewModel层：顾名思义是视图View的模型、映射和显示逻辑（如if for等，非业务逻辑），另外绑定器也在此层。 ViewModel是基于视图开发的一套模型，如果你的应用是给盲人用的，那么也可以开发一套基于Audio的模型AudioModel。</li><li>V(iew)层：将ViewModel通过特定的GUI展示出来，并在GUI控件上绑定视图交互事件，V(iew)一般由MVVM框架自动生成在浏览器中。</li></ul><h2 id="mvvm中m-v-v-m之间的关系" tabindex="-1"><a class="header-anchor" href="#mvvm中m-v-v-m之间的关系" aria-hidden="true">#</a> MVVM中M-V-V-M之间的关系?</h2><p>在MVVM架构下，View 和 Model 之间其实并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。</p><p>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，ViewModel里面包含DOM Listeners和Data Bindings，DOM Listeners和Data Bindings是实现双向绑定的关键。DOM Listeners监听页面所有View层DOM元素的变化，当发生变化，Model层的数据随之变化；Data Bindings监听Model层的数据，当数据发生变化，View层的DOM元素随之变化。</p><h2 id="mvvm模式的优缺点" tabindex="-1"><a class="header-anchor" href="#mvvm模式的优缺点" aria-hidden="true">#</a> MVVM模式的优缺点</h2><p>MVVM模式原先的MVP模式至少省下30%编码量，甚至能省下70%DOM操作，因为用MVP模式的话主要是在进行DOM操作。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><p>低耦合。View可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。<br> 可重用性。可以把一些视图的逻辑放在ViewModel里面，让很多View重用这段视图逻辑。<br> 独立开发。开发人员可以专注与业务逻辑和数据的开发(ViewModel)。设计人员可以专注于界面(View)的设计。<br> 可测试性。可以针对ViewModel来对界面(View)进行测试</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><p>学习成本高。 DEBUG困难</p><h2 id="mvvm应用场景" tabindex="-1"><a class="header-anchor" href="#mvvm应用场景" aria-hidden="true">#</a> MVVM应用场景</h2><p>针对具有复杂交互逻辑的前端应用 提供基础的架构抽象 通过Ajax数据持久化，保证前端用户体验</p><h2 id="常见的mvvm框架" tabindex="-1"><a class="header-anchor" href="#常见的mvvm框架" aria-hidden="true">#</a> 常见的MVVM框架</h2><p>Vue.js，AngularJs，ReactJs</p>',15),w=e("br",null,null,-1),v={href:"https://zhuanlan.zhihu.com/p/79899786",target:"_blank",rel:"noopener noreferrer"};function p(i,u){const d=o("ExternalLinkIcon");return n(),l("div",null,[s,h,e("img",{src:i.$withBase("/image/web/software-architecture-patterns/MVVM1.jpg"),alt:"示例"},null,8,c),m,e("blockquote",null,[e("p",null,[a("ref："),w,e("a",v,[a("前端技术之MVVM软件架构模式"),t(d)])])])])}const f=r(M,[["render",p],["__file","MVVC.html.vue"]]);export{f as default};
