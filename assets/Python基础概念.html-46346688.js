import{_ as o,M as i,p,q as l,R as n,t as s,N as d,a1 as t}from"./framework-8fa3e4ce.js";const c={},u=n("h1",{id:"python基础概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python基础概念","aria-hidden":"true"},"#"),s(" Python基础概念")],-1),r=n("h2",{id:"python程序的构成",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python程序的构成","aria-hidden":"true"},"#"),s(" Python程序的构成")],-1),k=["src"],h=n("ol",null,[n("li",null,"Python 程序由模块组成。1个模块对应 python 源文件，一般后缀名是：.py。"),n("li",null,"模块由语句组成。运行Python 程序时，按照模块中语句的顺字依次执行。"),n("li",null,"语句是 Python 程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等。")],-1),b=n("h3",{id:"程序基本格式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#程序基本格式","aria-hidden":"true"},"#"),s(" 程序基本格式")],-1),m={href:"https://peps.python.org/pep-0008/",target:"_blank",rel:"noopener noreferrer"},v=t(`<ol><li>空格： <ol><li>空格在python中有缩进含义，用来决定逻辑行的缩进层次，从而来决定语句的分组。</li><li>语句从新行的第一列开始。</li><li>缩进风格统一： <ol><li>每个缩进层次使用 单个制表符 或四个空格（IDE会自动将制表符设置成4个空格）。</li><li>python 用缩进，而不是{}表示程序块。</li></ol></li></ol></li><li>符号都是英文符号，不是中文。区分字母大小写。</li><li>注释： <ol><li>行注释 每行注释前加#号。</li><li>段注释 使用三个连续单引号（&#39;&#39;&#39;）。</li></ol></li><li>行连接符 \\ ,一般程序长度是没有限制的，但是为了可读性强，通常将一行比较长的程序分为多行。我们可以使用 \\ 行连接符，把它放在行结束的地方。Python 解释器会将它解释为同一行。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> turtle
t <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Pen<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span> <span class="token comment">#你好世界</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
sdds
&#39;&#39;&#39;</span>

a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span>\\
<span class="token number">45</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span>\\
<span class="token number">455</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>&quot;你好\\
世界&quot;<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>在Python中，变量也称为：对象的引用。因为，变量存储的就是对象的地址。变量通过地址引用了“对象”。</p><p>变量位于：栈内存。</p><p>对象位于：堆内存。</p><blockquote><ol><li>Python是动态类型语言：变量不需要显示声明类型。根据变量引用的对象，Python解释器自定确定数据类型。</li><li>Python是强类型语言：每个对象都有数据类型，只支持该类型支持的操作。</li></ol></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">3</span>
b <span class="token operator">=</span> <span class="token string">&quot;666&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h3><p>用于变量、函数、类、模块等的名称。标识符有如下特定的规则：</p><ol><li>区分大小写。如：abc和ABC是不同的。</li><li>第一个字符必须是字母、下划线。其后的字符是：字母、数字、下划线。</li><li>不能使用关键字。如：if、or、while等。可以使用<code>help()</code>=&gt;<code>keywords</code>查看关键字。</li><li>以双下划线和结尾的名称通常有特殊含义，尽量避免这种写法。比如：<code>__init__</code>是类的构造函数。</li></ol><h3 id="变量的声明和赋值" tabindex="-1"><a class="header-anchor" href="#变量的声明和赋值" aria-hidden="true">#</a> 变量的声明和赋值</h3><p>变量的声明和赋值用于将一个变量绑定到一个对象上，格式如下： <code>变量名 = 表达式</code></p><p>最简单的表达式就是字面量。比如：a = 5 。运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象；然后，将这个对象地址赋值给左边的变量。</p><blockquote><p>变量在使用前必须先被初始化；<br> 可以通过 del 删除不在使用的变量；<br> Python不支持常量，即没有语法规则限制改变一个常量的值。只能约定常量的命名规则及在逻辑上不对常量值进行修改。</p></blockquote><ol><li>链式赋值</li></ol><p>链式赋值用于同一个对象赋值给多个变量。<br><code>x=y=123</code> 相当于 <code>x=123;y=123</code></p><ol start="2"><li>系列解包赋值</li></ol><p>系列数据赋值给对应相同个数的变量（个数必须保持一致） <code>a,b,c=4,5,6</code> 相当于 <code>a=4;b=5;c=6</code></p><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><p>Python中，一切皆对象。每个对象由：id、type、value组成；</p><ol><li>id用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数<code>id(obj)</code>可返回对象obj的标识。</li><li>类型用于表示对象存储的“数据”类型。类型可以限制对象的取值范围以及可执行操作。可以使用<code>type(obj)</code>获得对象的所属类型。</li><li>值表示对象所存储的数据的信息。使用<code>print(obj)</code>可以直接打印出来</li></ol><blockquote><p>对象的本质就是：一个内存块，拥有特定的值，支持特定类型的相关操作。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 2310081872176</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;int&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 3</span>
<span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment"># 2310122192304</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment"># 666</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),q=["src"],g=t(`<h2 id="基本内置数据类型" tabindex="-1"><a class="header-anchor" href="#基本内置数据类型" aria-hidden="true">#</a> 基本内置数据类型</h2><table><thead><tr><th>类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>int</td><td>整数</td><td>122,545,544</td></tr><tr><td>float</td><td>小数或科学计算法</td><td>3.14,314e-2</td></tr><tr><td>bool</td><td>表示真假</td><td>True、False</td></tr><tr><td>str</td><td>由字符组成的序列</td><td>“12”，“ssd”，“你好世界”</td></tr></tbody></table><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h3><p>Python支持整数和浮点数，我们可以对数字做如下运算。</p><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>3+2</td><td>5</td></tr><tr><td>-</td><td>减法</td><td>5-3</td><td>2</td></tr><tr><td>*</td><td>乘法</td><td>3*5</td><td>15</td></tr><tr><td>/</td><td>浮点数除法</td><td>8/2</td><td>4.0</td></tr><tr><td>//</td><td>整数除法</td><td>7/2</td><td>3</td></tr><tr><td>**</td><td>幂</td><td>2**3</td><td>8</td></tr><tr><td>%</td><td>取余</td><td>7%4</td><td>3</td></tr><tr><td>&lt;&lt;</td><td>左移（相当于乘两次2）</td><td>3&lt;&lt;2</td><td>12</td></tr><tr><td>&gt;&gt;</td><td>右移（相当于除两次2）</td><td>8&gt;&gt;2</td><td>2</td></tr></tbody></table><blockquote><p>除数为0，会产生异常</p></blockquote><p>运算符 +、-、*、/、//、**、% 和赋值符可以构成“增强型赋值运算符”</p><p>示例：<code>a += 10</code> 等价于 <code>a = a + 10</code></p><blockquote><p>Python 不支持自增（++）和自减（--）</p></blockquote><h4 id="整数" tabindex="-1"><a class="header-anchor" href="#整数" aria-hidden="true">#</a> 整数</h4><p>Python中，除10进制，还有其他三种进制：</p><ul><li>0b 或 0B，二进制 0 1</li><li>0o 或 0O，八进制 0 1 2 3 4 5 6 7</li><li>0x 或 0X，二进制 0 1 2 3 4 5 6 7 8 9 a b c d e f</li></ul><p>整数可以有多大</p><p>int 可以存储任意大小的整数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">100</span>
a
<span class="token comment"># 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以做超大数的计算，而不会造成”整数溢出“，特别适合做科学运算。</p><blockquote><p>整数的缓存：命令行中Python会对范围为[-5,256]整数对象进项缓存(对象id一样)，范围外的都不缓存。文件执行的缓存范围为[-5,任意正整数]。</p></blockquote><h5 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h5><p>可以使用 <code>int()</code> 实现类型转换：</p><ol><li>浮点数，<code>int(9.9)</code>结果是9；</li><li>布尔值 True转为1，False转为0；</li><li>字符串 符合整数格式则直接转换为整数，否则报错；</li></ol><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><h4 id="转换-1" tabindex="-1"><a class="header-anchor" href="#转换-1" aria-hidden="true">#</a> 转换</h4><ol><li>类似于 int() ，我们可以使用 float() 将其他类型转换成浮点数；</li><li>整数和浮点数混合运算时，表达式结果自动转型成浮点数。比如：<code>2+8.0</code>结果时10.0；</li><li>可以使用 round(value) 进行四舍五入处理；</li></ol><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><p><code>True</code> 和 <code>False</code> 是关键字，本质上是1和0，可以和数字相加</p><h4 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h4><p>所有比较运算符返回True为真，返回False为假，这于1和0等价。</p><p>以下假设变量a为15，变量b为30：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于，比较对象值是否相等</td><td>(a == b) 返回 False</td></tr><tr><td>!=</td><td>不等于，比较对象值是否不相等</td><td>(a != b) 返回 True</td></tr><tr><td>&gt;</td><td>大于，返回x是否大于y</td><td>(a &gt; b) 返回 False</td></tr><tr><td>&lt;</td><td>小于，返回x是否小于y</td><td>(a &lt; b) 返回 True</td></tr><tr><td>&gt;=</td><td>大于等于，返回x是否大于等于y</td><td>(a &gt; b) 返回 False</td></tr><tr><td>&lt;=</td><td>小于等于，返回x是否小于等于y</td><td>(a &lt; b) 返回 True</td></tr></tbody></table><blockquote><p>关系运算符可以连着用,比如：<code>3&lt;a&lt;9</code></p></blockquote><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h4><table><thead><tr><th>运算符</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>or 逻辑或</td><td>x or y</td><td>x为true，则返回true。x为false，则返回y</td></tr><tr><td>and 逻辑与</td><td>x and y</td><td>x为true，则返回y。x为false，则返回false</td></tr><tr><td>not 取反</td><td>not x</td><td>x为true，则返回false。x为false，则返回true</td></tr></tbody></table><h4 id="同一运算符" tabindex="-1"><a class="header-anchor" href="#同一运算符" aria-hidden="true">#</a> 同一运算符</h4><p>用于比较两个对象的引用，就是对象的id</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是不是引用同一个对象</td></tr><tr><td>is not</td><td>判断两个标识符是不是引用的不同对象</td></tr></tbody></table><blockquote><p>is 与 == 区别：is是比较的对象地址，==是比较的对象的值；<br> is 对比需要注意 缓存池机制和驻留机制（该机制会导致字面量值id一致）；</p></blockquote><blockquote><p>运算符优先级别：位运算符和算数运算&gt;比较运算符&gt;赋值运算符&gt;逻辑运算符</p></blockquote><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>本质上就是字符序列。Python的字符串是不可变的，我们不能对原有字符串做任何修改。</p><p>Python3的字符默认是16位 Unicode 编码，可以使用 <code>ord()</code> 和 <code>chr()</code> 对字符串就行转换。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
<span class="token number">65</span>
<span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&quot;黄&quot;</span><span class="token punctuation">)</span>
<span class="token number">40644</span>
<span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span>
<span class="token string">&#39;A&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建字符串" tabindex="-1"><a class="header-anchor" href="#创建字符串" aria-hidden="true">#</a> 创建字符串</h4><p>使用单引号或者双引号创建字符串。多行使用三个单引号或三个多引号。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;nihao&quot;</span>
b <span class="token operator">=</span> <span class="token string">&#39;huhu&#39;</span>
c <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;dsdd
sd&quot;s&quot;d
&#39;a&#39;a&#39;&#39;&#39;</span>
a <span class="token comment"># &#39;nihao&#39;</span>
b <span class="token comment"># &#39;huhu&#39;</span>
c <span class="token comment"># &#39;dsdd\\nsd&quot;s&quot;d\\n\\&#39;a\\&#39;a&#39;</span>
d <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
d <span class="token comment"># &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转换-2" tabindex="-1"><a class="header-anchor" href="#转换-2" aria-hidden="true">#</a> 转换</h4><p>使用 str() 将其他类型转换成字符串；</p><h4 id="提取" tabindex="-1"><a class="header-anchor" href="#提取" aria-hidden="true">#</a> 提取</h4><p>可以使用[]提取字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;0123456789&quot;</span>
a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment"># &#39;4&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接" aria-hidden="true">#</a> 字符串拼接</h4><ol><li>可以使用+将多个字符串拼接起来。例如：“aa” + “bb” ==&gt; &quot;aabb&quot;</li></ol><blockquote><p>+两边都是字符串才会拼接，如果是数字则会加法运算，如果类型不同则会抛出异常</p></blockquote><ol start="2"><li>可以将多个字面字符串放在一起实现拼接。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;aa&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;bb&quot;</span>
<span class="token comment"># &#39;aabb&#39;</span>
<span class="token string">&quot;aa&quot;</span><span class="token string">&quot;bbcc&quot;</span>
<span class="token comment"># &#39;aabbcc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串复制" tabindex="-1"><a class="header-anchor" href="#字符串复制" aria-hidden="true">#</a> 字符串复制</h4><p>使用*可以实现字符串复制</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;abc&quot;</span><span class="token operator">*</span><span class="token number">3</span>
<span class="token comment"># &#39;abcabcabc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从控制台读取字符串" tabindex="-1"><a class="header-anchor" href="#从控制台读取字符串" aria-hidden="true">#</a> 从控制台读取字符串</h4><p>使用 input() 从控制台读取键盘输入内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 请输入<span class="token number">4545</span>
a
<span class="token comment"># &#39;4545&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h4><p>我们可以使用“+特殊字符”，实现某些难以用字符表示的效果。比如：换行符...</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>(在行尾时)</td><td>续行符</td></tr><tr><td>\\</td><td>反斜杠符号</td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\\b</td><td>退格</td></tr><tr><td>\\n</td><td>换行</td></tr><tr><td>\\t</td><td>横向制表符</td></tr><tr><td>\\r</td><td>回车</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;你\\n好\\n么&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 你</span>
<span class="token comment"># 好</span>
<span class="token comment"># 么</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串切片-slice-操作" tabindex="-1"><a class="header-anchor" href="#字符串切片-slice-操作" aria-hidden="true">#</a> 字符串切片 slice 操作</h4><p>切片操作可以快速的让我们提取子字符串。标准格式为：<code>[起始偏移量 start : 终止偏移量 end : 步长 step]</code></p><p>常规操作</p><table><thead><tr><th>示例</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td>&quot;abcdef&quot;[:]</td><td>&quot;abcdef&quot;</td><td>提取整个字符串</td></tr><tr><td>&quot;abcdef&quot;[2:]</td><td>&quot;cdef&quot;</td><td>从索引start索引开始到结尾</td></tr><tr><td>&quot;abcdef&quot;[:2]</td><td>&quot;ab&quot;</td><td>从开始到索引end-1结束</td></tr><tr><td>&quot;abcdef&quot;[2:4]</td><td>&quot;cd&quot;</td><td>从start到end-1</td></tr><tr><td>&quot;abcdef&quot;[1:5:2]</td><td>&quot;bd&quot;</td><td>从start提取到end-1，步长是step</td></tr></tbody></table><p>其它操作</p><table><thead><tr><th>示例</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td>&quot;abcdefghijklmnopqrstuvwxyz&quot;[-3:]</td><td>&quot;xyz&quot;</td><td>倒数3个</td></tr><tr><td>&quot;abcdefghijklmnopqrstuvwxyz&quot;[-8:-3]</td><td>&quot;stuvw&quot;</td><td>倒数第8个到到数第3个（包头不包尾）</td></tr><tr><td>&quot;abcdefghijklmnopqrstuvwxyz&quot;[::-1]</td><td>&quot;zyxwvutsrqponmlkjihgfedcba&quot;</td><td>步长为负，从右到左反向提取</td></tr></tbody></table><h4 id="字符串驻留机制" tabindex="-1"><a class="header-anchor" href="#字符串驻留机制" aria-hidden="true">#</a> 字符串驻留机制</h4><p><strong>字符串驻留</strong>：仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串驻留池中。</p><p>Python支持字符串驻留机制，对于符合标识符规则的字符串（仅包含下划线(_)、字母和数字）会启用字符串驻留机制</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span>
a <span class="token keyword">is</span> b
<span class="token comment"># True</span>
c <span class="token operator">=</span> <span class="token string">&quot;555*&quot;</span>
d <span class="token operator">=</span> <span class="token string">&quot;555*&quot;</span>
c <span class="token keyword">is</span> d
<span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="成员操作符" tabindex="-1"><a class="header-anchor" href="#成员操作符" aria-hidden="true">#</a> 成员操作符</h5><p><code>in/not in</code> 关键字，判断某个字符（子字符串）是否存在于字符串中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;abcdefg&quot;</span>
<span class="token string">&quot;b&quot;</span> <span class="token keyword">in</span> a <span class="token comment"># True</span>
<span class="token string">&quot;def&quot;</span> <span class="token keyword">in</span> a <span class="token comment"># True</span>
<span class="token string">&quot;eee&quot;</span> <span class="token keyword">in</span> a <span class="token comment"># False</span>
<span class="token string">&quot;eee&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> a <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可变字符串" tabindex="-1"><a class="header-anchor" href="#可变字符串" aria-hidden="true">#</a> 可变字符串</h4><p>在Python中，字符串属于不可变对象，不支持修改，如果需要修改固定对象其中的值，可以使用 io.StringIo 对象（array模块也可）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> io
sio <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token string">&quot;你好世界，我叫龙傲天&quot;</span><span class="token punctuation">)</span>
sio<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># &#39;你好世界，我叫龙傲天&#39;</span>
<span class="token builtin">id</span><span class="token punctuation">(</span>sio<span class="token punctuation">)</span> <span class="token comment"># 2363908524640</span>
sio<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
sio<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;虎&quot;</span><span class="token punctuation">)</span>
sio<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># &#39;你好世界，我叫虎傲天&#39;</span>
<span class="token builtin">id</span><span class="token punctuation">(</span>sio<span class="token punctuation">)</span> <span class="token comment"># 2363908524640</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法汇总" tabindex="-1"><a class="header-anchor" href="#方法汇总" aria-hidden="true">#</a> 方法汇总</h4><p>查找</p><p>a = &quot;这是一个方法测试文案，这里包含了45、abcdef、还有@#￥%.&quot;</p><ol><li>len() - 返回字符串长度 - len(a) # 33</li><li>startswith() - 以指定字符串开头 - a.startswith(&quot;这是&quot;) # True</li><li>endswith() - 以指定字符串结尾 - a.endswith(&quot;%.&quot;) # True</li><li>find() - 第一次出现指定字符串位置 - a.find(&quot;文案&quot;) # 8</li><li>rfind() - 最后一次出现指定字符串位置 - a.rfind(&quot;文案&quot;) # 8</li><li>count() - 指定字符串出现了几次 - a.count(&quot;文案&quot;) # 1</li><li>isalnum() - 所有字符全是字母或数字 - a.isalnum() # False</li></ol><p>去除首位信息</p><p>b = &quot;<em>s</em>x<em>y</em>&quot;</p><ol><li>strip() - 去除字符串首尾指定信息（默认空白符） - b.strip(&quot;<em>&quot;) # &#39;s</em>x*y&#39;</li><li>lstrip() - 去除字符串左侧指定信息 - b.lstrip(&quot;<em>&quot;) # &#39;s</em>x<em>y</em>&#39;</li><li>rstrip() - 去除字符串右侧指定信息 - b.rstrip(&quot;<em>&quot;) # &#39;<em>s</em>x</em>y&#39;</li></ol><p>大小写转换</p><p>c = &quot;i love you, me Too&quot;</p><ol><li>capitalize() - 首字母大写 - c.capitalize() # &#39;I love you, me too&#39;</li><li>title() - 每个单词首字母大写 - c.title() # &#39;I Love You, Me Too&#39;</li><li>upper() - 所有字母大写 - c.upper() # &#39;I LOVE YOU, ME TOO&#39;</li><li>lower() - 所有字母小写 - c.lower() # &#39;i love you, me too&#39;</li><li>swapcase() - 字母大小写转换 - c.swapcase() # &#39;I LOVE YOU, ME tOO&#39;</li></ol><p>格式排版</p><p>d = &quot;666&quot;</p><ol><li>center() - 根据排版长度和填充字符(默认空白)剧中排版 - d.center(10) # &#39; 666 &#39;</li><li>ljust() - 根据排版长度和填充字符(默认空白)左排版 - d.ljust(10, &quot;<em>&quot;) # &#39;666</em>******&#39;</li><li>rjust() - 根据排版长度和填充字符(默认空白)右排版</li></ol><p>判断方法</p><ol><li>isalnum() - 是否为字母或数字</li><li>isalpha() - 字符串是否只由字母（包含中文）组成</li><li>isdigit() - 字符串是否只由数字组成（不包含小数）</li><li>isspace() - 是否为空白符</li><li>isupper() - 是否为大写字母</li><li>islower() - 是否为小写字母</li></ol><p>其它方法</p><ol><li>replace() - 字符串替换</li><li>split() - 基于指定分割符将字符串分割成多个字符串（默认使用空白字符）</li><li>join() - 将一系列字符串拼接成一个字符串（join拼接性能优于“+”）</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># &#39;aabbcc&#39;</span>
<span class="token string">&quot;@&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># &#39;aa@bb@cc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>format() - 字符串格式化功能</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 基本使用</span>
a <span class="token operator">=</span> <span class="token string">&quot;他叫{0}，今年{1}岁，{0}是个好人&quot;</span>
a<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;许仙&quot;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token comment"># &#39;他叫许仙，今年45岁，许仙是个好人&#39;</span>

b <span class="token operator">=</span> <span class="token string">&quot;他叫{name}，今年{age}岁，{name}是个好人&quot;</span>
b<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;张飞&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token comment"># &#39;他叫张飞，今年45岁，张飞是个好人&#39;</span>

<span class="token comment"># 填充和对齐 ^、&lt;、&gt; 分别对应居中、左对齐、右对齐，后面带宽度（:后面带填充字符，只能是一个字符，默认空格）</span>
<span class="token string">&quot;{:$&gt;8}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;666&quot;</span><span class="token punctuation">)</span> <span class="token comment"># &#39;$$$$$666&#39;</span>
<span class="token string">&quot;我是{0}，我喜欢还数字{1:*^8}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;天仙&quot;</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token comment"># &#39;我是天仙，我喜欢还数字***85***&#39;</span>

<span class="token comment"># 数字格式化  浮点数-f 整数-d</span>
<span class="token string">&quot;{:.2f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">45.656554</span><span class="token punctuation">)</span> <span class="token comment"># &#39;45.66&#39; 保留小数点后两位</span>
<span class="token string">&quot;{:+.9f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">45.656</span><span class="token punctuation">)</span> <span class="token comment"># &#39;+45.656000000&#39; 带符号保留小数点后两位</span>
<span class="token string">&quot;{:.0f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">45.656</span><span class="token punctuation">)</span> <span class="token comment"># &#39;46&#39; 不带小数</span>
<span class="token string">&quot;{:0&gt;3d}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># &#39;005&#39; 数字补0</span>
<span class="token string">&quot;{:h&lt;3d}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># &#39;5hh&#39; 数字补h</span>
<span class="token string">&quot;{:,}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span> <span class="token comment"># &#39;100,000,000&#39; 以逗号分隔数字格式</span>
<span class="token string">&quot;{:.2%}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0.66</span><span class="token punctuation">)</span> <span class="token comment"># &#39;66.00%&#39; 百分比格式</span>
<span class="token string">&quot;{:.2e}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token comment"># &#39;1.00e+06&#39; 指数记法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,100);function y(a,f){const e=i("ExternalLinkIcon");return p(),l("div",null,[u,r,n("img",{src:a.$withBase("/image/server/python/002.png"),alt:"图片"},null,8,k),h,b,n("p",null,[n("a",m,[s("PEP-8风格指南"),d(e)])]),v,n("img",{src:a.$withBase("/image/server/python/003.png"),alt:"图片"},null,8,q),g])}const _=o(c,[["render",y],["__file","Python基础概念.html.vue"]]);export{_ as default};
